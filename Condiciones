class Condicion
end
class Visibilidad < Condicion
end
class EsPublico < Visibilidad
end
class EsPrivado < Visibilidad
end
class Selector < Condicion
end
class CantParametros < Condicion
end


$condiciones = {:nombre => Selector, :is_private => EsPrivado, :is_public => EsPublico, :has_parameters => CantParametros}
$condiciones.each do |condition,cond_class| Aspectable.define_known_method_to_object(condition,cond_class) end

class Condicion
  def esCumplida(unMetodo)
  end
end



class Visibilidad < Condicion
  def esCumplida(unMetodo,poseedorDelMetodo)
    poseedorDelMetodo.send(self.class.to_s.downcase+"?",unMetodo)
  end
end

class EsPrivado < Visibilidad
end

class EsPublico < Visibilidad
end





class Selector < Condicion

  def initialize(unaExp)
    @regexp=unaExp
  end
  def esCumplida(unMetodo,poseedorDelMetodo)
    @regexp.match(unMetodo)
  end
end


$tiposParametros = {:mandatory=>proc{|modo|modo==:req},:optional=>proc{|modo|modo==:opt},:both=>proc{true}}
$tiposParametros.each{|symbol,condition| Aspectable.send(:define_method,symbol){condition}}

class CantParametros < Condicion

  def initialize(unaCant,unModo=$tiposParametros[:both])
    @cant=unaCant
    @modo=unModo
  end

  def esCumplida(nomMetodo,poseedorDelMetodo)
    poseedorDelMetodo.metodo(nomMetodo).parameters.count{|modoParam|@modo.call(modoParam)}==@cant
  end

end