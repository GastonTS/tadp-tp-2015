class CreadorDeCondiciones
  def initialize
    @creadorDeCondiciones=Object.new
  end
  def self.condicionCreable(nombreMetodo,clase)
    define_singleton_method(nombreMetodo){|*parametrosNew|clase.new(*parametrosNew)}
  end
end



class Condicion
  def esCumplida(unMetodo)
  end
end




class Visibilidad < Condicion
  def esCumplida(unMetodo,poseedorDelMetodo)
    poseedorDelMetodo.send(self.class.to_s.downcase+"?",unMetodo)
  end
end

class EsPrivado < Visibilidad
end

class EsPublico < Visibilidad
end





class Selector < Condicion

  def initialize(unaExp)
    @regexp=unaExp
  end
  def esCumplida(unMetodo,poseedorDelMetodo)
    @regexp.match(unMetodo)
  end
end

class CondicionTipoParametro
  def esCumplido(modoParametro)
    @condicion.call(modoParametro)
  end
  def condicion(&unaCond)
    @condicion=unaCond
  end
end


$tiposParametros = {:mandatory=>CondicionTipoParametro.new,:optional=>CondicionTipoParametro.new,:both=>CondicionTipoParametro.new}
$tiposParametros[:mandatory].condicion{|modo|modo==:req}
$tiposParametros[:optional].condicion{|modo|modo==:opt}
$tiposParametros[:both].condicion{true}


class CantParametros < Condicion

  def initialize(unaCant,unModo=:both)
    @cant=unaCant
    @modo=$tiposParametros[unModo]
  end
  def esCumplida(nomMetodo,poseedorDelMetodo)
    poseedorDelMetodo.metodo(nomMetodo).parameters.count{|modoParam,nombreParam|@modo.esCumplido(modoParam)}==@cant
  end

end


$condiciones = {:nombre => Selector, :is_private => EsPrivado, :is_public => EsPublico, :has_parameters => CantParametros}

$condiciones.each do
|metodo,clase| CreadorDeCondiciones.send(:condicionCreable,metodo,clase)
end
